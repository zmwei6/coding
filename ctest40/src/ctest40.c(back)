/*
 ============================================================================
 Name        : ctest40.c
 Author      : Zimin Wei
 Version     :
 Copyright   : Your copyright notice
 Description : Letter Combinations of a Phone Number
 ============================================================================
 */

/* Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the
 * number could represent.
 * A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not
 * map to any letters.
*/

/*
 * Input: "23"
 * Output: ["ad", "ae", "af", "bd", "be", "bf", "cd", "ce", "cf"].
 */

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

char getLetter(char *ptr, int order)
{
	return ptr[order];
}

/*
 * Note: The returned array must be malloced, assume caller calls free().
 */
char ** letterCombinations(char * digits, int* returnSize){
	char *letters[8] = {"2abc", "3def", "4ghi", "5jkl", "6mno", "7pqrs", "8tuv", "9wxyz"};
	int lettersSize[] = {3, 3, 3, 3, 3, 4, 3, 4}, num[strlen(digits)];
	char **returnString, *letter[strlen(digits)], **p;
	int i, j, k, n, len, subreturnSize;
	len = strlen(digits);
	*returnSize = 1;
	for(i = 0; i < len; i++)
	{
		switch (digits[i])
		{
		case '2':
			*returnSize *= lettersSize[0];
			num[i] = 3;
			letter[i] = letters[0] + 1;
			break;
		case '3':
			*returnSize *= lettersSize[1];
			num[i] = 3;
			letter[i] = letters[1] + 1;
			break;
		case '4':
			*returnSize *= lettersSize[2];
			num[i] = 3;
			letter[i] = letters[2] + 1;
			break;
		case '5':
			*returnSize *= lettersSize[3];
			num[i] = 3;
			letter[i] = letters[3] + 1;
			break;
		case '6':
			*returnSize *= lettersSize[4];
			num[i] = 3;
			letter[i] = letters[4] + 1;
			break;
		case '7':
			*returnSize *= lettersSize[5];
			num[i] = 4;
			letter[i] = letters[5] + 1;
			break;
		case '8':
			*returnSize *= lettersSize[6];
			num[i] = 3;
			letter[i] = letters[6] + 1;
			break;
		case '9':
			*returnSize *= lettersSize[7];
			num[i] = 4;
			letter[i] = letters[7] + 1;
			break;
		default:
			break;
		}
	}

	/* allocate 2D-Array */
	returnString = (char **)malloc((*returnSize) * sizeof(char *));

	for(i = 0; i < (*returnSize); i++)
	  returnString[i] = (char *)malloc((len + 1) * sizeof(char));

	if(len == 1)
	{
		for(i = 0; i < num[0]; i++)
		{
			returnString[i][0] = letter[0][i];
		}
		return returnString;
	}

	p = letterCombinations(digits + 1, &subreturnSize);
//	n = 0;
//	for(i = 0; i < len; i++)
//	{
//		for(j = i; j < num[i]; j++)
//		{
//			for(k = 0; k < len; k++)
//			{
//			  returnString[n][k] = letter[k][j];
//				returnString[n][k] = getLetter(letter[k], j);
//			}
//			n++;
//		}
//	}
	for(i = 0; i < *returnSize; i++)
	{
	  for(k = 0; k < len; k++)
		for(j = 0; j < num[k]; j++)
		{
			for(k = 0; k < len; k++)
			{
//			  returnString[n][k] = letter[k][j];
				returnString[n][k] = getLetter(letter[k], j);
			}
			n++;
		}
	}

	return returnString;
}

int main(void) {
	char *digits = {"24"}, **p;
	int returnSize, i;

	p = letterCombinations(digits, &returnSize);
	printf("%s\n", p[0]);

	/* free a pointer to a pointer */
	for(i = 0; i < strlen(digits); i++)
	  free(p[i]);
	free(p);

	return EXIT_SUCCESS;
}
